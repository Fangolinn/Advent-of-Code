from collections import namedtuple

import pytest
from solve import compare, parse_list

ParseTestData = namedtuple("ParseTestData", "input, expected")

parse_test_data = [
    ParseTestData("[1,1,3,1,1]", [1, 1, 3, 1, 1]),
    ParseTestData("[1,1,5,1,1]", [1, 1, 5, 1, 1]),
    ParseTestData("[[1],[2,3,4]]", [[1], [2, 3, 4]]),
    ParseTestData("[[1],4]", [[1], 4]),
    ParseTestData("[9]", [9]),
    ParseTestData("[[8,7,6]]", [[8, 7, 6]]),
    ParseTestData("[[4,4],4,4]", [[4, 4], 4, 4]),
    ParseTestData("[[4,4],4,4,4]", [[4, 4], 4, 4, 4]),
    ParseTestData("[7,7,7,7]", [7, 7, 7, 7]),
    ParseTestData("[7,7,7]", [7, 7, 7]),
    ParseTestData("[]", []),
    ParseTestData("[3]", [3]),
    ParseTestData("[[[]]]", [[[]]]),
    ParseTestData("[[]]", [[]]),
    ParseTestData("[1,[2,[3,[4,[5,6,7]]]],8,9]", [1, [2, [3, [4, [5, 6, 7]]]], 8, 9]),
    ParseTestData("[1,[2,[3,[4,[5,6,0]]]],8,9]", [1, [2, [3, [4, [5, 6, 0]]]], 8, 9]),
    ParseTestData(
        "[[4,[6,[9,0,1,10],[6,9],[0,5,9,8],[6,6]],9,[[8],[7,1,8,10,2],9,[9,0,5,1,9]]],[],[[1,7,7,[6]],10],[4,[5,4],9,[]]]",
        [
            [
                4,
                [6, [9, 0, 1, 10], [6, 9], [0, 5, 9, 8], [6, 6]],
                9,
                [[8], [7, 1, 8, 10, 2], 9, [9, 0, 5, 1, 9]],
            ],
            [],
            [[1, 7, 7, [6]], 10],
            [4, [5, 4], 9, []],
        ],
    ),
    ParseTestData(
        "[[7],[[7,[1,8,3,9,0],[4,4,9,10,0],6,[2,3,7,8,6]],1]]",
        [[7], [[7, [1, 8, 3, 9, 0], [4, 4, 9, 10, 0], 6, [2, 3, 7, 8, 6]], 1]],
    ),
    ParseTestData("[[],[0],[[]]]", [[], [0], [[]]]),
    ParseTestData("[[0],[[4]]]", [[0], [[4]]]),
    ParseTestData(
        "[[],[[[5]],[[]],[],1,6],[0,8,10],[3,[],[0],2]]",
        [[], [[[5]], [[]], [], 1, 6], [0, 8, 10], [3, [], [0], 2]],
    ),
    ParseTestData(
        "[[[2,[1],9,[4,2],6],[[1,0,8,4,10],[1,7,6],9,5],[3,2,4,5,[9,7,2]],[[6,4],5,[1],7],6],[10,[3,10,[0,4,2],5],10,[],0]]",
        [
            [
                [2, [1], 9, [4, 2], 6],
                [[1, 0, 8, 4, 10], [1, 7, 6], 9, 5],
                [3, 2, 4, 5, [9, 7, 2]],
                [[6, 4], 5, [1], 7],
                6,
            ],
            [10, [3, 10, [0, 4, 2], 5], 10, [], 0],
        ],
    ),
    ParseTestData(
        "[[1,8],[9,[2,[],[1,2,7,3],[1,1],5],6,[9,9,10,7]],[[8,[],[4,1],0,[0]],0],[[[1,9,8],1,[0,5,3,9],1,[5,7]],8]]",
        [
            [1, 8],
            [9, [2, [], [1, 2, 7, 3], [1, 1], 5], 6, [9, 9, 10, 7]],
            [[8, [], [4, 1], 0, [0]], 0],
            [[[1, 9, 8], 1, [0, 5, 3, 9], 1, [5, 7]], 8],
        ],
    ),
    ParseTestData("[[],[],[8]]", [[], [], [8]]),
    ParseTestData(
        "[[[],[[3,4,6,8,5],[6,10],[5,1,10,6]],[[10,1,5],3,0]],[2,[[10,0,3,6],[1,1,9,9,10],[6,2,2,4],3],[[2,6,3,4,8],2,[10,7,4,0]],[3,[9],[1,6,8],7,[]]],[[[10,2,9],[4,10,7,4],[4,8,0,2]],8,0],[3,[7,[0,8,7,10],[9,5,6,0],[7,8,6,5]]],[[[7,5,2],1,[7,2,5],[3,5,4]],[[2],7,10],9,[[],[10],[1,9]],[5,[8,0]]]]",
        [
            [[], [[3, 4, 6, 8, 5], [6, 10], [5, 1, 10, 6]], [[10, 1, 5], 3, 0]],
            [
                2,
                [[10, 0, 3, 6], [1, 1, 9, 9, 10], [6, 2, 2, 4], 3],
                [[2, 6, 3, 4, 8], 2, [10, 7, 4, 0]],
                [3, [9], [1, 6, 8], 7, []],
            ],
            [[[10, 2, 9], [4, 10, 7, 4], [4, 8, 0, 2]], 8, 0],
            [3, [7, [0, 8, 7, 10], [9, 5, 6, 0], [7, 8, 6, 5]]],
            [
                [[7, 5, 2], 1, [7, 2, 5], [3, 5, 4]],
                [[2], 7, 10],
                9,
                [[], [10], [1, 9]],
                [5, [8, 0]],
            ],
        ],
    ),
    ParseTestData(
        "[[0,[],2],[[[2,5,1],4,[3]],[6,[1,2],[6,2],[1,3,8,5,10],[5,3]]],[0,4,9,[[7,10,1,10,5],3,6,1],[3,[4,4]]],[0],[]]",
        [
            [0, [], 2],
            [[[2, 5, 1], 4, [3]], [6, [1, 2], [6, 2], [1, 3, 8, 5, 10], [5, 3]]],
            [0, 4, 9, [[7, 10, 1, 10, 5], 3, 6, 1], [3, [4, 4]]],
            [0],
            [],
        ],
    ),
    ParseTestData(
        "[[],[[[5,9],[6,10,1,9,1],10,4],[[],[],[6,1,6],4,[0]]],[[[],[4,2,10]],2,[1,[4,0,9,10,2],5,[10,3]],2,8],[1,[6,[2,9,1,6,3],[],4,7],[[9,9]]],[8,8,[5,[7,4,0,0,0]]]]",
        [
            [],
            [[[5, 9], [6, 10, 1, 9, 1], 10, 4], [[], [], [6, 1, 6], 4, [0]]],
            [[[], [4, 2, 10]], 2, [1, [4, 0, 9, 10, 2], 5, [10, 3]], 2, 8],
            [1, [6, [2, 9, 1, 6, 3], [], 4, 7], [[9, 9]]],
            [8, 8, [5, [7, 4, 0, 0, 0]]],
        ],
    ),
    ParseTestData("[[8,[]],[[]]]", [[8, []], [[]]]),
    ParseTestData(
        "[[[[5,5,1,3]],[[4,8],[3,10,5],5],7,[1,[2,0,1],[3,2,2]],9],[]]",
        [
            [[[5, 5, 1, 3]], [[4, 8], [3, 10, 5], 5], 7, [1, [2, 0, 1], [3, 2, 2]], 9],
            [],
        ],
    ),
    ParseTestData(
        "[[[10,[10]],[]],[[],7],[6,[],7,[[],9,[3]],1],[[],[],[[7,2,8,9],[6,8],1,0,[]]]]",
        [
            [[10, [10]], []],
            [[], 7],
            [6, [], 7, [[], 9, [3]], 1],
            [[], [], [[7, 2, 8, 9], [6, 8], 1, 0, []]],
        ],
    ),
    ParseTestData("[2,3,0,2]", [2, 3, 0, 2]),
    ParseTestData("[2,3,0,2,5]", [2, 3, 0, 2, 5]),
]


@pytest.mark.parametrize("line, expected_out", parse_test_data)
def test_parse(line: str, expected_out: list) -> None:
    out = parse_list(line)

    assert out == expected_out, f"Expected: {expected_out}, actual: {out}"


CompareTestData = namedtuple("ParseTestData", "left_p, right_p, expected")

compare_test_data = [
    CompareTestData([1, 1, 3, 1, 1], [1, 1, 5, 1, 1], True),
    CompareTestData([[1], [2, 3, 4]], [[1], 4], True),
    CompareTestData([9], [[8, 7, 6]], False),
    CompareTestData([[4, 4], 4, 4], [[4, 4], 4, 4, 4], True),
    CompareTestData([7, 7, 7, 7], [7, 7, 7], False),
    CompareTestData([], [3], True),
    CompareTestData([[[]]], [[]], False),
    CompareTestData(
        [1, [2, [3, [4, [5, 6, 7]]]], 8, 9], [1, [2, [3, [4, [5, 6, 0]]]], 8, 9], False
    ),
    CompareTestData([], [1, 1, 3, 1, 1], True),
]


@pytest.mark.parametrize("left_packet, right_packet, expected", compare_test_data)
def test_compare(left_packet: list, right_packet: list, expected: bool) -> None:
    assert (
        compare(left_packet, right_packet) == expected
    ), f"Comparison failed, {left_packet} - {right_packet}"
